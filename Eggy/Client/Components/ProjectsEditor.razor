@implements IDisposable
@inject IStorageProcessor _storageProcessor

<p>
    <label>
        Id
        <input @bind="@NewId"/>
    </label>
    <label>
        Name
        <input @bind="@NewName"/>
    </label>

    <button @onclick="InsertNewProject">Add project</button>
</p>

<Iterations Items="_storageProcessor.AllProjects">
    <ProjectView Project="@context"/>
</Iterations>

@code {

    public string NewId { get; set; } = string.Empty;

    public string NewName { get; set; } = string.Empty;

    protected override void OnInitialized() => _storageProcessor.ProjectsChanged += StateHasChanged;

    public void Dispose() => _storageProcessor.ProjectsChanged -= StateHasChanged;

    private async Task InsertNewProject()
    {
        if (string.IsNullOrWhiteSpace(NewId)
            || string.IsNullOrWhiteSpace(NewName)
            || _storageProcessor.AllProjects.Any(project => project.Id == NewId || project.Name == NewName)) return;

        await _storageProcessor.AddProject(new Project
        {
            Id = NewId,
            Name = NewName
        });
    }

}